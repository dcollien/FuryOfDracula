/**
 * Written for COMP9024 2013s2 at UNSW Kensington.
 * @author dstacey@cse.unsw.edu.au
 *
 *  DO NOT edit this file
 */

package dracula;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.FileDescriptor;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Arrays;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import dracula.Dracula;
import dracula.DraculaMove;

public class DraculaRunner {

   public static void main (String[] args) {

      boolean failed = false;

      //disable stdout
      ByteArrayOutputStream baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // Read in state from stdin
      String pastPlays = "";
      String[] messages = {"",""};

      // NOTE:
          // Input is in the format : { pastPlays: '%s', messages: [%s,%s,%s...] }
          // Dodgy json parsing without a json library to ease student compilation problems
          //

      try {
         BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));
         String input = new String();
         input = stdin.readLine();
         pastPlays = input.split("pastPlays\":\"")[1].split("\",\"")[0];
         messages = input.substring(("pastPlays\":\"" + pastPlays).length()).split("\",\"");
         messages[1] = messages[1].substring("messages\":[\"".length());
         messages[messages.length-1] = messages[messages.length-1].substring(0, messages[messages.length-1].length() - "]}\"".length());
      } catch (IOException e) {
         failed = true;
         System.out.println(e);
      }

      //Run user code and kill it if it takes too long.
      ExecutorService executor = Executors.newSingleThreadExecutor();
      DecideMoveTask d = new DecideMoveTask(pastPlays, messages);
      DraculaMove m = null;
      try {
         m = executor.submit(d).get(15, TimeUnit.MINUTES);
      } catch (java.lang.InterruptedException i) {
         failed = true;
         System.out.println(i);
      } catch (java.util.concurrent.ExecutionException e) {
         failed = true;
         System.out.println(e);
      } catch (java.util.concurrent.TimeoutException t) {
         failed = true;
         System.out.println(t);
      }

      // Print the decided move.
      if (!failed) {
         //reset stdout
         System.setOut(new PrintStream(new FileOutputStream(FileDescriptor.out)));

         //write out result to stdout
         System.out.print("{" +
                          "\"move\": \"" + m.getPlayAsString().replace("\"","") + "\", " +
                          "\"message\": \"" + m.getMessage().replace("\"","") + "\"," +
                          "\"timer\": \"" + 1 + "\"" +
                          "}");
      } else {
         System.out.println("FAILED");
      }

      executor.shutdown();
   }
}


class DecideMoveTask implements Callable<DraculaMove> {

   private String pastPlays;
   private String[] messages;

   public DecideMoveTask(String pastPlays, String[] messages) {
      this.pastPlays = pastPlays;
      this.messages = messages;
   }

   public DraculaMove call() {
      Dracula d = PlayerFactory.getDracula( pastPlays, messages );
      if (d == null) {
         throw new UnsupportedOperationException("No Dracula selected.");
      }
      DraculaMove result = d.decideMove( );
      return result;
   }
}
